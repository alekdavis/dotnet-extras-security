<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Introduction</title><meta name="Title" content="Introduction" /><meta name="Help.Id" content="DotNetExtras.Security.Introduction" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="DotNetExtras.Security.Introduction" /><meta name="Description" content="The DotNetExtras.Security library implements most commonly used security operations. For the detailed description of the library API, code samples, and usage scenarios, see the API documentation section." /><meta name="tocFile" content="../toc/Root.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">DotNetExtras.Security Library Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><div id="HeaderPrelimContainer" class="level my-1 px-2"><div id="PreliminaryContainer" class="level-left"><div class="level-item"><span class="tag is-warning is-medium">This is preliminary documentation and is subject to change.</span></div></div></div><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Introduction</h1><div><p>
        The <em>DotNetExtras.Security</em> library implements most commonly used security operations. For the detailed description of the library API, code samples, and usage scenarios, see the <em>API documentation</em> section.
      </p></div><h2 id="Overview" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Overview</h2><div id="IDBABSection"><p>
          The <em>DotNetExtras.Security</em> library groups the security classes and extension methods under the following namespaces:
        </p><ul><li><p><span class="code">DotNetExtras.Security</span>: Implements generic security operations.</p><ul><li><p><span class="code">Crypto</span>: Encrypts and decrypts strings using a symmetric (AES/Rijndael) algorithm and a random salt.</p></li><li><p><span class="code">Hash</span>: Hashes strings using the secure SHA algorithms and a random salt; validates the hash value.</p></li><li><p><span class="code">Jwt</span>: Generates and validates JSON Web Tokens (JWTs).</p></li><li><p><span class="code">Password</span>: Generates random passwords with unambiguous characters.</p></li></ul></li><li><p><span class="code">DotNetExtras.Security.Json</span>: Defines types and operations used for JSON serialization of sensitive properties.</p><ul><li><p><span class="code">JsonExtensions</span>: Implements extension methods for JSON serialization  of any objects with sensitive properties via the <span class="code">System.Text.Json</span> (STJ).</p></li><li><p><span class="code">MaskAttribute</span>: Defines an attribute that can be applied to the custom class properties to mask the property values during JSON serialization via <span class="code">System.Text.Json</span> (STJ).</p></li></ul></li></ul><p>
          The following sections provide code examples and usage scenarios for the <em>DotNetExtras.Security</em> classes.
        </p><h4 id="Crypto" class="quickLinkHeader">Crypto</h4><p>
              The <em>Crypto</em> class simplifies the symmetric key encryption and decryption operation. Before encrypting the plain text value, it generates a random salt that it adds in front of the plain text and includes the salt value in the cipher text. The cipher text value will be base64-encoded.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Crypto examples</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">using DotNetExtras.Security;
...
string plainText = "Hello, World!";
string password = "never-hard-code-passwords!";

// Encrypt the plain text using the password to generate the symmetric key.
string encrypted = Crypto.Encrypt(plainText, password)

// Decrypt the cipher text using the same password to get the original plain text.
string decrypted = Crypto.Decrypt(encryptedText, password);</code></pre></div></div><h4 id="Hash" class="quickLinkHeader">Hash</h4><p>
              The <em>Hash</em> class generates a random salt and appends it in front of the plain text value before hashing it. The hashed value will be hex-encoded.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Hash examples</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">using DotNetExtras.Security;
...
string plainText = "Hello, World!";
HashType hashType = HashType.SHA256;

// Use either option to generate the hash value.
// string hashText = Hash.Generate(hashType, plainText);
// or
string hashText = plainText.ToHash(hashType)

// Given the hash value, validate the plain text.
bool valid = Hash.Validate(hashType, hashText, "Hello, World!")</code></pre></div></div><h4 id="Jwt" class="quickLinkHeader">Jwt</h4><p>
              The <em>Jwt</em> class generates and validates JSON Web Tokens (JWTs).
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">JWT examples</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">using System.Security.Claims;
using DotNetExtras.Security;
...
string secret = "never-hard-code-passwords!";
int    tokenExpirationSeconds = 3600; // 1 hour
string email = "joe.doe@sample.com";

Jwt jwt = new(secret, tokenExpirationSeconds);

string token = jwt.Generate(email);

ClaimsPrincipal principal = jwt.Validate(token);

Assert.NotNull(principal);
Assert.Equal(email, principal.FindFirst(ClaimTypes.Email)?.Value);</code></pre></div></div><h4 id="Password" class="quickLinkHeader">Password</h4><p>
              The <em>Password</em> class generates random passwords without ambiguous characters (such as <span class="code">1</span>, <span class="code">I</span>, <span class="code">l</span> or <span class="code">0</span>, <span class="code">O</span>). The password will contain at least one character from each of the following categories: lowercase letters, uppercase letters, digits, and special characters.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Hash examples</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">using DotNetExtras.Security;
...
// Generate a random password between 12 and 16 characters long.
string randomPassword = Password.Generate(12, 16);</code></pre></div></div><h4 id="JsonExtensions" class="quickLinkHeader">JsonExtensions</h4><p>
              The <em>JsonExtensions</em> class offers extension methods for JSON serialization with omitted or masked property values.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">JSON examples</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">using DotNetExtras.Security.Json;
...
User user = new()
{   
    UserName = "joe.doe",
    Password = "never-hard-code-passwords!",
    Email = "joe.doe@sample.com",
    PersonalData = new()
    {
      Ssn = "123-45-6789"
    }
};

string? json;

// Serialize the user object to JSON, 
// replacing the Password property value with null.
json = user.ToJson("Password");

// Serialize the user object to JSON, 
// replacing the Password and PersonalData.Ssn property values with "###".
json = user.ToJson("###", "Password", "PersonalData.Ssn");

// Serialize the user object to JSON, 
// masking the Password and PersonalData.Ssn property values
// with the asterisk characters,
// but leaving the first and last 2 characters in plain text.
json = user.ToJson('*', 2, 2, "Password", "PersonalData.Ssn");</code></pre></div></div><h4 id="MaskAttributes" class="quickLinkHeader">MaskAttribute</h4><p>
              The <em>MaskAttribute</em> class can be applied to the class properties, so that the property values are automatically masked by the JSON serialization operation performed using <span class="code">System.Text.Json</span> (STJ).
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Property mask examples</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-c#">using DotNetExtras.Security.Json;
...
// Value will be replaced with null.
[Mask()]
public string? Secret1 { get; set; }

// Value will be replaced with an empty string.
[Mask("")]
public string? Secret2 { get; set; }

// Value will be replaced with the literal string "***masked***".
[Mask("***masked***")]
public string? Secret3 { get; set; }

// Value will be replaced with the hex-encoded SHA-256 hash.
[Mask(HashType.SHA256)]
public string? Secret4 { get; set; }

// Value will be replaced with the asterisks
// and two first and last characters will be left in plain text.
[Mask('*', 2, 2)]
public string? Secret5 { get; set; }</code></pre></div></div></div><h2 id="More" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>More</h2><div id="IDCABSection"><p>
            For more examples of available functionality, see the 
            <a href="https://github.com/alekdavis/dotnet-extras-security/tree/main/SecurityTests" target="_blank" rel="noopener noreferrer">unit test project</a>.
          </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="https://www.nuget.org/packages/DotNetExtras.Security" target="_blank" rel="noopener noreferrer">DotNetExtras.Security NuGet package</a></div><div><a href="https://github.com/alekdavis/dotnet-extras-security" target="_blank" rel="noopener noreferrer">DotNetExtras.Security project repository</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Overview</a><ul class="menu"><li><a class="quickLink">Crypto</a></li><li><a class="quickLink">Hash</a></li><li><a class="quickLink">Jwt</a></li><li><a class="quickLink">Password</a></li><li><a class="quickLink">JsonExtensions</a></li><li><a class="quickLink">MaskAttribute</a></li></ul></li><li><a class="quickLink">More</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p>Copyright © 2025 Alek Davis</p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:alek.davis%40gmail.com?Subject=DotNetExtras.Security%20Library%20Documentation">Alek Davis</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>